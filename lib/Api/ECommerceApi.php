<?php
/**
 * ECommerceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  RelayPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RelayPay API
 *
 * Documentation RelayPay API v2.0.0
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: danny@relaypay.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RelayPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use RelayPay\ApiException;
use RelayPay\Configuration;
use RelayPay\HeaderSelector;
use RelayPay\ObjectSerializer;

/**
 * ECommerceApi Class Doc Comment
 *
 * @category Class
 * @package  RelayPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ECommerceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getMerchantTransaction' => [
            'application/json',
        ],
        'getMerchantTxs' => [
            'application/json',
        ],
        'getMerchantWebhookLogs' => [
            'application/json',
        ],
        'setEcommerceRequest' => [
            'application/json',
        ],
        'setEcommerceSalesforce' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getMerchantTransaction
     *
     * Get merchant transaction by a specified orderId
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $x_merchant_id x_merchant_id (required)
     * @param  string $order_id order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantTransaction'] to see the possible values for this operation
     *
     * @throws \RelayPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RelayPay\Model\EcommerceMerchantTransaction|\RelayPay\Model\EcommerceMerchantTransaction|\RelayPay\Model\EcommerceMerchantTransaction
     */
    public function getMerchantTransaction($x_api_key, $x_merchant_id, $order_id, string $contentType = self::contentTypes['getMerchantTransaction'][0])
    {
        list($response) = $this->getMerchantTransactionWithHttpInfo($x_api_key, $x_merchant_id, $order_id, $contentType);
        return $response;
    }

    /**
     * Operation getMerchantTransactionWithHttpInfo
     *
     * Get merchant transaction by a specified orderId
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantTransaction'] to see the possible values for this operation
     *
     * @throws \RelayPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RelayPay\Model\EcommerceMerchantTransaction|\RelayPay\Model\EcommerceMerchantTransaction|\RelayPay\Model\EcommerceMerchantTransaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMerchantTransactionWithHttpInfo($x_api_key, $x_merchant_id, $order_id, string $contentType = self::contentTypes['getMerchantTransaction'][0])
    {
        $request = $this->getMerchantTransactionRequest($x_api_key, $x_merchant_id, $order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\RelayPay\Model\EcommerceMerchantTransaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\EcommerceMerchantTransaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\EcommerceMerchantTransaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RelayPay\Model\EcommerceMerchantTransaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\EcommerceMerchantTransaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\EcommerceMerchantTransaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RelayPay\Model\EcommerceMerchantTransaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\EcommerceMerchantTransaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\EcommerceMerchantTransaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\RelayPay\Model\EcommerceMerchantTransaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\EcommerceMerchantTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\EcommerceMerchantTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\EcommerceMerchantTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMerchantTransactionAsync
     *
     * Get merchant transaction by a specified orderId
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMerchantTransactionAsync($x_api_key, $x_merchant_id, $order_id, string $contentType = self::contentTypes['getMerchantTransaction'][0])
    {
        return $this->getMerchantTransactionAsyncWithHttpInfo($x_api_key, $x_merchant_id, $order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMerchantTransactionAsyncWithHttpInfo
     *
     * Get merchant transaction by a specified orderId
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMerchantTransactionAsyncWithHttpInfo($x_api_key, $x_merchant_id, $order_id, string $contentType = self::contentTypes['getMerchantTransaction'][0])
    {
        $returnType = '\RelayPay\Model\EcommerceMerchantTransaction';
        $request = $this->getMerchantTransactionRequest($x_api_key, $x_merchant_id, $order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMerchantTransaction'
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMerchantTransactionRequest($x_api_key, $x_merchant_id, $order_id, string $contentType = self::contentTypes['getMerchantTransaction'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getMerchantTransaction'
            );
        }

        // verify the required parameter 'x_merchant_id' is set
        if ($x_merchant_id === null || (is_array($x_merchant_id) && count($x_merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_merchant_id when calling getMerchantTransaction'
            );
        }

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getMerchantTransaction'
            );
        }


        $resourcePath = '/e-commerce/transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // header params
        if ($x_merchant_id !== null) {
            $headerParams['x-merchant-id'] = ObjectSerializer::toHeaderValue($x_merchant_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMerchantTxs
     *
     * Get all bill payment transactions for the merchant
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $x_merchant_id x_merchant_id (required)
     * @param  \RelayPay\Model\Pageable $pageable pageable (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantTxs'] to see the possible values for this operation
     *
     * @throws \RelayPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RelayPay\Model\PageEcommerceMerchantTransaction|\RelayPay\Model\PageEcommerceMerchantTransaction|\RelayPay\Model\PageEcommerceMerchantTransaction
     */
    public function getMerchantTxs($x_api_key, $x_merchant_id, $pageable, string $contentType = self::contentTypes['getMerchantTxs'][0])
    {
        list($response) = $this->getMerchantTxsWithHttpInfo($x_api_key, $x_merchant_id, $pageable, $contentType);
        return $response;
    }

    /**
     * Operation getMerchantTxsWithHttpInfo
     *
     * Get all bill payment transactions for the merchant
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  \RelayPay\Model\Pageable $pageable (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantTxs'] to see the possible values for this operation
     *
     * @throws \RelayPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RelayPay\Model\PageEcommerceMerchantTransaction|\RelayPay\Model\PageEcommerceMerchantTransaction|\RelayPay\Model\PageEcommerceMerchantTransaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMerchantTxsWithHttpInfo($x_api_key, $x_merchant_id, $pageable, string $contentType = self::contentTypes['getMerchantTxs'][0])
    {
        $request = $this->getMerchantTxsRequest($x_api_key, $x_merchant_id, $pageable, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\RelayPay\Model\PageEcommerceMerchantTransaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\PageEcommerceMerchantTransaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\PageEcommerceMerchantTransaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RelayPay\Model\PageEcommerceMerchantTransaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\PageEcommerceMerchantTransaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\PageEcommerceMerchantTransaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RelayPay\Model\PageEcommerceMerchantTransaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\PageEcommerceMerchantTransaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\PageEcommerceMerchantTransaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\RelayPay\Model\PageEcommerceMerchantTransaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\PageEcommerceMerchantTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\PageEcommerceMerchantTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\PageEcommerceMerchantTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMerchantTxsAsync
     *
     * Get all bill payment transactions for the merchant
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  \RelayPay\Model\Pageable $pageable (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantTxs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMerchantTxsAsync($x_api_key, $x_merchant_id, $pageable, string $contentType = self::contentTypes['getMerchantTxs'][0])
    {
        return $this->getMerchantTxsAsyncWithHttpInfo($x_api_key, $x_merchant_id, $pageable, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMerchantTxsAsyncWithHttpInfo
     *
     * Get all bill payment transactions for the merchant
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  \RelayPay\Model\Pageable $pageable (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantTxs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMerchantTxsAsyncWithHttpInfo($x_api_key, $x_merchant_id, $pageable, string $contentType = self::contentTypes['getMerchantTxs'][0])
    {
        $returnType = '\RelayPay\Model\PageEcommerceMerchantTransaction';
        $request = $this->getMerchantTxsRequest($x_api_key, $x_merchant_id, $pageable, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMerchantTxs'
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  \RelayPay\Model\Pageable $pageable (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantTxs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMerchantTxsRequest($x_api_key, $x_merchant_id, $pageable, string $contentType = self::contentTypes['getMerchantTxs'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getMerchantTxs'
            );
        }

        // verify the required parameter 'x_merchant_id' is set
        if ($x_merchant_id === null || (is_array($x_merchant_id) && count($x_merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_merchant_id when calling getMerchantTxs'
            );
        }

        // verify the required parameter 'pageable' is set
        if ($pageable === null || (is_array($pageable) && count($pageable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageable when calling getMerchantTxs'
            );
        }


        $resourcePath = '/e-commerce/transaction/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageable,
            'pageable', // param base name
            'object', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // header params
        if ($x_merchant_id !== null) {
            $headerParams['x-merchant-id'] = ObjectSerializer::toHeaderValue($x_merchant_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMerchantWebhookLogs
     *
     * Get merchant webhook logs in date range
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $x_merchant_id x_merchant_id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  \DateTime $end_date end_date (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantWebhookLogs'] to see the possible values for this operation
     *
     * @throws \RelayPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RelayPay\Model\MerchantWebhookLog[]|\RelayPay\Model\MerchantWebhookLog[]|\RelayPay\Model\MerchantWebhookLog[]
     */
    public function getMerchantWebhookLogs($x_api_key, $x_merchant_id, $start_date, $end_date, string $contentType = self::contentTypes['getMerchantWebhookLogs'][0])
    {
        list($response) = $this->getMerchantWebhookLogsWithHttpInfo($x_api_key, $x_merchant_id, $start_date, $end_date, $contentType);
        return $response;
    }

    /**
     * Operation getMerchantWebhookLogsWithHttpInfo
     *
     * Get merchant webhook logs in date range
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  \DateTime $start_date (required)
     * @param  \DateTime $end_date (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantWebhookLogs'] to see the possible values for this operation
     *
     * @throws \RelayPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RelayPay\Model\MerchantWebhookLog[]|\RelayPay\Model\MerchantWebhookLog[]|\RelayPay\Model\MerchantWebhookLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMerchantWebhookLogsWithHttpInfo($x_api_key, $x_merchant_id, $start_date, $end_date, string $contentType = self::contentTypes['getMerchantWebhookLogs'][0])
    {
        $request = $this->getMerchantWebhookLogsRequest($x_api_key, $x_merchant_id, $start_date, $end_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\RelayPay\Model\MerchantWebhookLog[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\MerchantWebhookLog[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\MerchantWebhookLog[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RelayPay\Model\MerchantWebhookLog[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\MerchantWebhookLog[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\MerchantWebhookLog[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RelayPay\Model\MerchantWebhookLog[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\MerchantWebhookLog[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\MerchantWebhookLog[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\RelayPay\Model\MerchantWebhookLog[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\MerchantWebhookLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\MerchantWebhookLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\MerchantWebhookLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMerchantWebhookLogsAsync
     *
     * Get merchant webhook logs in date range
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  \DateTime $start_date (required)
     * @param  \DateTime $end_date (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantWebhookLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMerchantWebhookLogsAsync($x_api_key, $x_merchant_id, $start_date, $end_date, string $contentType = self::contentTypes['getMerchantWebhookLogs'][0])
    {
        return $this->getMerchantWebhookLogsAsyncWithHttpInfo($x_api_key, $x_merchant_id, $start_date, $end_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMerchantWebhookLogsAsyncWithHttpInfo
     *
     * Get merchant webhook logs in date range
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  \DateTime $start_date (required)
     * @param  \DateTime $end_date (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantWebhookLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMerchantWebhookLogsAsyncWithHttpInfo($x_api_key, $x_merchant_id, $start_date, $end_date, string $contentType = self::contentTypes['getMerchantWebhookLogs'][0])
    {
        $returnType = '\RelayPay\Model\MerchantWebhookLog[]';
        $request = $this->getMerchantWebhookLogsRequest($x_api_key, $x_merchant_id, $start_date, $end_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMerchantWebhookLogs'
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  \DateTime $start_date (required)
     * @param  \DateTime $end_date (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMerchantWebhookLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMerchantWebhookLogsRequest($x_api_key, $x_merchant_id, $start_date, $end_date, string $contentType = self::contentTypes['getMerchantWebhookLogs'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getMerchantWebhookLogs'
            );
        }

        // verify the required parameter 'x_merchant_id' is set
        if ($x_merchant_id === null || (is_array($x_merchant_id) && count($x_merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_merchant_id when calling getMerchantWebhookLogs'
            );
        }

        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling getMerchantWebhookLogs'
            );
        }

        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling getMerchantWebhookLogs'
            );
        }


        $resourcePath = '/e-commerce/transaction/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'startDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'endDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // header params
        if ($x_merchant_id !== null) {
            $headerParams['x-merchant-id'] = ObjectSerializer::toHeaderValue($x_merchant_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setEcommerceRequest
     *
     * Ecommerce provider sends a transaction request.
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $x_merchant_id x_merchant_id (required)
     * @param  string $x_api_signature x_api_signature (required)
     * @param  \RelayPay\Model\EcommerceIncomingRequest $ecommerce_incoming_request ecommerce_incoming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEcommerceRequest'] to see the possible values for this operation
     *
     * @throws \RelayPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RelayPay\Model\EcommerceResponse|\RelayPay\Model\EcommerceResponse|\RelayPay\Model\EcommerceResponse
     */
    public function setEcommerceRequest($x_api_key, $x_merchant_id, $x_api_signature, $ecommerce_incoming_request, string $contentType = self::contentTypes['setEcommerceRequest'][0])
    {
        list($response) = $this->setEcommerceRequestWithHttpInfo($x_api_key, $x_merchant_id, $x_api_signature, $ecommerce_incoming_request, $contentType);
        return $response;
    }

    /**
     * Operation setEcommerceRequestWithHttpInfo
     *
     * Ecommerce provider sends a transaction request.
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $x_api_signature (required)
     * @param  \RelayPay\Model\EcommerceIncomingRequest $ecommerce_incoming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEcommerceRequest'] to see the possible values for this operation
     *
     * @throws \RelayPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RelayPay\Model\EcommerceResponse|\RelayPay\Model\EcommerceResponse|\RelayPay\Model\EcommerceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setEcommerceRequestWithHttpInfo($x_api_key, $x_merchant_id, $x_api_signature, $ecommerce_incoming_request, string $contentType = self::contentTypes['setEcommerceRequest'][0])
    {
        $request = $this->setEcommerceRequestRequest($x_api_key, $x_merchant_id, $x_api_signature, $ecommerce_incoming_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\RelayPay\Model\EcommerceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\EcommerceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\EcommerceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RelayPay\Model\EcommerceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\EcommerceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\EcommerceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RelayPay\Model\EcommerceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RelayPay\Model\EcommerceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RelayPay\Model\EcommerceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\RelayPay\Model\EcommerceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\EcommerceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\EcommerceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RelayPay\Model\EcommerceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setEcommerceRequestAsync
     *
     * Ecommerce provider sends a transaction request.
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $x_api_signature (required)
     * @param  \RelayPay\Model\EcommerceIncomingRequest $ecommerce_incoming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEcommerceRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setEcommerceRequestAsync($x_api_key, $x_merchant_id, $x_api_signature, $ecommerce_incoming_request, string $contentType = self::contentTypes['setEcommerceRequest'][0])
    {
        return $this->setEcommerceRequestAsyncWithHttpInfo($x_api_key, $x_merchant_id, $x_api_signature, $ecommerce_incoming_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setEcommerceRequestAsyncWithHttpInfo
     *
     * Ecommerce provider sends a transaction request.
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $x_api_signature (required)
     * @param  \RelayPay\Model\EcommerceIncomingRequest $ecommerce_incoming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEcommerceRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setEcommerceRequestAsyncWithHttpInfo($x_api_key, $x_merchant_id, $x_api_signature, $ecommerce_incoming_request, string $contentType = self::contentTypes['setEcommerceRequest'][0])
    {
        $returnType = '\RelayPay\Model\EcommerceResponse';
        $request = $this->setEcommerceRequestRequest($x_api_key, $x_merchant_id, $x_api_signature, $ecommerce_incoming_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setEcommerceRequest'
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $x_api_signature (required)
     * @param  \RelayPay\Model\EcommerceIncomingRequest $ecommerce_incoming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEcommerceRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setEcommerceRequestRequest($x_api_key, $x_merchant_id, $x_api_signature, $ecommerce_incoming_request, string $contentType = self::contentTypes['setEcommerceRequest'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling setEcommerceRequest'
            );
        }

        // verify the required parameter 'x_merchant_id' is set
        if ($x_merchant_id === null || (is_array($x_merchant_id) && count($x_merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_merchant_id when calling setEcommerceRequest'
            );
        }

        // verify the required parameter 'x_api_signature' is set
        if ($x_api_signature === null || (is_array($x_api_signature) && count($x_api_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_signature when calling setEcommerceRequest'
            );
        }

        // verify the required parameter 'ecommerce_incoming_request' is set
        if ($ecommerce_incoming_request === null || (is_array($ecommerce_incoming_request) && count($ecommerce_incoming_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ecommerce_incoming_request when calling setEcommerceRequest'
            );
        }


        $resourcePath = '/e-commerce/request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // header params
        if ($x_merchant_id !== null) {
            $headerParams['x-merchant-id'] = ObjectSerializer::toHeaderValue($x_merchant_id);
        }
        // header params
        if ($x_api_signature !== null) {
            $headerParams['x-api-signature'] = ObjectSerializer::toHeaderValue($x_api_signature);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ecommerce_incoming_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ecommerce_incoming_request));
            } else {
                $httpBody = $ecommerce_incoming_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setEcommerceSalesforce
     *
     * Ecommerce provider pushes a Salesforce specific data for authorisation.
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $x_merchant_id x_merchant_id (required)
     * @param  string $x_api_signature x_api_signature (required)
     * @param  \RelayPay\Model\MerchantSalesforcePlugin $merchant_salesforce_plugin merchant_salesforce_plugin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEcommerceSalesforce'] to see the possible values for this operation
     *
     * @throws \RelayPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setEcommerceSalesforce($x_api_key, $x_merchant_id, $x_api_signature, $merchant_salesforce_plugin, string $contentType = self::contentTypes['setEcommerceSalesforce'][0])
    {
        $this->setEcommerceSalesforceWithHttpInfo($x_api_key, $x_merchant_id, $x_api_signature, $merchant_salesforce_plugin, $contentType);
    }

    /**
     * Operation setEcommerceSalesforceWithHttpInfo
     *
     * Ecommerce provider pushes a Salesforce specific data for authorisation.
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $x_api_signature (required)
     * @param  \RelayPay\Model\MerchantSalesforcePlugin $merchant_salesforce_plugin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEcommerceSalesforce'] to see the possible values for this operation
     *
     * @throws \RelayPay\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setEcommerceSalesforceWithHttpInfo($x_api_key, $x_merchant_id, $x_api_signature, $merchant_salesforce_plugin, string $contentType = self::contentTypes['setEcommerceSalesforce'][0])
    {
        $request = $this->setEcommerceSalesforceRequest($x_api_key, $x_merchant_id, $x_api_signature, $merchant_salesforce_plugin, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setEcommerceSalesforceAsync
     *
     * Ecommerce provider pushes a Salesforce specific data for authorisation.
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $x_api_signature (required)
     * @param  \RelayPay\Model\MerchantSalesforcePlugin $merchant_salesforce_plugin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEcommerceSalesforce'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setEcommerceSalesforceAsync($x_api_key, $x_merchant_id, $x_api_signature, $merchant_salesforce_plugin, string $contentType = self::contentTypes['setEcommerceSalesforce'][0])
    {
        return $this->setEcommerceSalesforceAsyncWithHttpInfo($x_api_key, $x_merchant_id, $x_api_signature, $merchant_salesforce_plugin, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setEcommerceSalesforceAsyncWithHttpInfo
     *
     * Ecommerce provider pushes a Salesforce specific data for authorisation.
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $x_api_signature (required)
     * @param  \RelayPay\Model\MerchantSalesforcePlugin $merchant_salesforce_plugin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEcommerceSalesforce'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setEcommerceSalesforceAsyncWithHttpInfo($x_api_key, $x_merchant_id, $x_api_signature, $merchant_salesforce_plugin, string $contentType = self::contentTypes['setEcommerceSalesforce'][0])
    {
        $returnType = '';
        $request = $this->setEcommerceSalesforceRequest($x_api_key, $x_merchant_id, $x_api_signature, $merchant_salesforce_plugin, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setEcommerceSalesforce'
     *
     * @param  string $x_api_key (required)
     * @param  string $x_merchant_id (required)
     * @param  string $x_api_signature (required)
     * @param  \RelayPay\Model\MerchantSalesforcePlugin $merchant_salesforce_plugin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEcommerceSalesforce'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setEcommerceSalesforceRequest($x_api_key, $x_merchant_id, $x_api_signature, $merchant_salesforce_plugin, string $contentType = self::contentTypes['setEcommerceSalesforce'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling setEcommerceSalesforce'
            );
        }

        // verify the required parameter 'x_merchant_id' is set
        if ($x_merchant_id === null || (is_array($x_merchant_id) && count($x_merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_merchant_id when calling setEcommerceSalesforce'
            );
        }

        // verify the required parameter 'x_api_signature' is set
        if ($x_api_signature === null || (is_array($x_api_signature) && count($x_api_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_signature when calling setEcommerceSalesforce'
            );
        }

        // verify the required parameter 'merchant_salesforce_plugin' is set
        if ($merchant_salesforce_plugin === null || (is_array($merchant_salesforce_plugin) && count($merchant_salesforce_plugin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_salesforce_plugin when calling setEcommerceSalesforce'
            );
        }


        $resourcePath = '/e-commerce/salesforce';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // header params
        if ($x_merchant_id !== null) {
            $headerParams['x-merchant-id'] = ObjectSerializer::toHeaderValue($x_merchant_id);
        }
        // header params
        if ($x_api_signature !== null) {
            $headerParams['x-api-signature'] = ObjectSerializer::toHeaderValue($x_api_signature);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchant_salesforce_plugin)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchant_salesforce_plugin));
            } else {
                $httpBody = $merchant_salesforce_plugin;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
