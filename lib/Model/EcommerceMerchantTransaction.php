<?php
/**
 * EcommerceMerchantTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RelayPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RelayPay API
 *
 * Documentation RelayPay API v2.0.0
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: danny@relaypay.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RelayPay\Model;

use \ArrayAccess;
use \RelayPay\ObjectSerializer;

/**
 * EcommerceMerchantTransaction Class Doc Comment
 *
 * @category Class
 * @description E-commerce Payment Update Info
 * @package  RelayPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EcommerceMerchantTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EcommerceMerchantTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'string',
        'transaction_id' => 'string',
        'order_status' => 'string',
        'customer_email' => 'string',
        'customer_name' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'crypto_amount' => 'float',
        'crypto_currency' => 'string',
        'blockchain_hash' => 'string',
        'merchant_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => null,
        'transaction_id' => null,
        'order_status' => null,
        'customer_email' => null,
        'customer_name' => null,
        'amount' => null,
        'currency' => null,
        'crypto_amount' => null,
        'crypto_currency' => null,
        'blockchain_hash' => null,
        'merchant_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_id' => false,
        'transaction_id' => false,
        'order_status' => false,
        'customer_email' => false,
        'customer_name' => false,
        'amount' => false,
        'currency' => false,
        'crypto_amount' => false,
        'crypto_currency' => false,
        'blockchain_hash' => false,
        'merchant_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'orderId',
        'transaction_id' => 'transactionId',
        'order_status' => 'orderStatus',
        'customer_email' => 'customerEmail',
        'customer_name' => 'customerName',
        'amount' => 'amount',
        'currency' => 'currency',
        'crypto_amount' => 'cryptoAmount',
        'crypto_currency' => 'cryptoCurrency',
        'blockchain_hash' => 'blockchainHash',
        'merchant_id' => 'merchantId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'transaction_id' => 'setTransactionId',
        'order_status' => 'setOrderStatus',
        'customer_email' => 'setCustomerEmail',
        'customer_name' => 'setCustomerName',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'crypto_amount' => 'setCryptoAmount',
        'crypto_currency' => 'setCryptoCurrency',
        'blockchain_hash' => 'setBlockchainHash',
        'merchant_id' => 'setMerchantId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'transaction_id' => 'getTransactionId',
        'order_status' => 'getOrderStatus',
        'customer_email' => 'getCustomerEmail',
        'customer_name' => 'getCustomerName',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'crypto_amount' => 'getCryptoAmount',
        'crypto_currency' => 'getCryptoCurrency',
        'blockchain_hash' => 'getBlockchainHash',
        'merchant_id' => 'getMerchantId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORDER_STATUS_CANCELLED = 'Cancelled';
    public const ORDER_STATUS_SUCCESS = 'Success';
    public const ORDER_STATUS_FAILED = 'Failed';
    public const ORDER_STATUS_PENDING = 'Pending';
    public const CURRENCY_USD = 'USD';
    public const CURRENCY_GBP = 'GBP';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_AUD = 'AUD';
    public const CURRENCY_AED = 'AED';
    public const CURRENCY_CAD = 'CAD';
    public const CURRENCY_CHF = 'CHF';
    public const CURRENCY_CNY = 'CNY';
    public const CURRENCY_HKD = 'HKD';
    public const CURRENCY_INR = 'INR';
    public const CURRENCY_JPY = 'JPY';
    public const CURRENCY_NZD = 'NZD';
    public const CURRENCY_PHP = 'PHP';
    public const CURRENCY_SEK = 'SEK';
    public const CURRENCY_SGD = 'SGD';
    public const CURRENCY_THB = 'THB';
    public const CURRENCY__TRY = 'TRY';
    public const CURRENCY_ZAR = 'ZAR';
    public const CURRENCY_BGN = 'BGN';
    public const CURRENCY_BRL = 'BRL';
    public const CURRENCY_COP = 'COP';
    public const CURRENCY_CZK = 'CZK';
    public const CURRENCY_DKK = 'DKK';
    public const CURRENCY_DOP = 'DOP';
    public const CURRENCY_EGP = 'EGP';
    public const CURRENCY_HRK = 'HRK';
    public const CURRENCY_IDR = 'IDR';
    public const CURRENCY_ILS = 'ILS';
    public const CURRENCY_JOD = 'JOD';
    public const CURRENCY_KES = 'KES';
    public const CURRENCY_KRW = 'KRW';
    public const CURRENCY_KWD = 'KWD';
    public const CURRENCY_LKR = 'LKR';
    public const CURRENCY_MAD = 'MAD';
    public const CURRENCY_MXN = 'MXN';
    public const CURRENCY_MYR = 'MYR';
    public const CURRENCY_NGN = 'NGN';
    public const CURRENCY_NOK = 'NOK';
    public const CURRENCY_OMR = 'OMR';
    public const CURRENCY_PEN = 'PEN';
    public const CURRENCY_PKR = 'PKR';
    public const CURRENCY_PLN = 'PLN';
    public const CURRENCY_RON = 'RON';
    public const CURRENCY_RUB = 'RUB';
    public const CURRENCY_TWD = 'TWD';
    public const CURRENCY_VND = 'VND';
    public const CRYPTO_CURRENCY_ETH = 'ETH';
    public const CRYPTO_CURRENCY_BTC = 'BTC';
    public const CRYPTO_CURRENCY_USDT = 'USDT';
    public const CRYPTO_CURRENCY_USDC = 'USDC';
    public const CRYPTO_CURRENCY_DAI = 'DAI';
    public const CRYPTO_CURRENCY_SOL = 'SOL';
    public const CRYPTO_CURRENCY_BNB = 'BNB';
    public const CRYPTO_CURRENCY_AVAX = 'AVAX';
    public const CRYPTO_CURRENCY_OP = 'OP';
    public const CRYPTO_CURRENCY_POL = 'POL';
    public const CRYPTO_CURRENCY_TRX = 'TRX';
    public const CRYPTO_CURRENCY_LINK = 'LINK';
    public const CRYPTO_CURRENCY_UNI = 'UNI';
    public const CRYPTO_CURRENCY_APE = 'APE';
    public const CRYPTO_CURRENCY_DOGE = 'DOGE';
    public const CRYPTO_CURRENCY_LTC = 'LTC';
    public const CRYPTO_CURRENCY_XRP = 'XRP';
    public const CRYPTO_CURRENCY_XLM = 'XLM';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStatusAllowableValues()
    {
        return [
            self::ORDER_STATUS_CANCELLED,
            self::ORDER_STATUS_SUCCESS,
            self::ORDER_STATUS_FAILED,
            self::ORDER_STATUS_PENDING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_USD,
            self::CURRENCY_GBP,
            self::CURRENCY_EUR,
            self::CURRENCY_AUD,
            self::CURRENCY_AED,
            self::CURRENCY_CAD,
            self::CURRENCY_CHF,
            self::CURRENCY_CNY,
            self::CURRENCY_HKD,
            self::CURRENCY_INR,
            self::CURRENCY_JPY,
            self::CURRENCY_NZD,
            self::CURRENCY_PHP,
            self::CURRENCY_SEK,
            self::CURRENCY_SGD,
            self::CURRENCY_THB,
            self::CURRENCY__TRY,
            self::CURRENCY_ZAR,
            self::CURRENCY_BGN,
            self::CURRENCY_BRL,
            self::CURRENCY_COP,
            self::CURRENCY_CZK,
            self::CURRENCY_DKK,
            self::CURRENCY_DOP,
            self::CURRENCY_EGP,
            self::CURRENCY_HRK,
            self::CURRENCY_IDR,
            self::CURRENCY_ILS,
            self::CURRENCY_JOD,
            self::CURRENCY_KES,
            self::CURRENCY_KRW,
            self::CURRENCY_KWD,
            self::CURRENCY_LKR,
            self::CURRENCY_MAD,
            self::CURRENCY_MXN,
            self::CURRENCY_MYR,
            self::CURRENCY_NGN,
            self::CURRENCY_NOK,
            self::CURRENCY_OMR,
            self::CURRENCY_PEN,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_RON,
            self::CURRENCY_RUB,
            self::CURRENCY_TWD,
            self::CURRENCY_VND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCryptoCurrencyAllowableValues()
    {
        return [
            self::CRYPTO_CURRENCY_ETH,
            self::CRYPTO_CURRENCY_BTC,
            self::CRYPTO_CURRENCY_USDT,
            self::CRYPTO_CURRENCY_USDC,
            self::CRYPTO_CURRENCY_DAI,
            self::CRYPTO_CURRENCY_SOL,
            self::CRYPTO_CURRENCY_BNB,
            self::CRYPTO_CURRENCY_AVAX,
            self::CRYPTO_CURRENCY_OP,
            self::CRYPTO_CURRENCY_POL,
            self::CRYPTO_CURRENCY_TRX,
            self::CRYPTO_CURRENCY_LINK,
            self::CRYPTO_CURRENCY_UNI,
            self::CRYPTO_CURRENCY_APE,
            self::CRYPTO_CURRENCY_DOGE,
            self::CRYPTO_CURRENCY_LTC,
            self::CRYPTO_CURRENCY_XRP,
            self::CRYPTO_CURRENCY_XLM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('customer_email', $data ?? [], null);
        $this->setIfExists('customer_name', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('crypto_amount', $data ?? [], null);
        $this->setIfExists('crypto_currency', $data ?? [], null);
        $this->setIfExists('blockchain_hash', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!is_null($this->container['order_status']) && !in_array($this->container['order_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_status', must be one of '%s'",
                $this->container['order_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCryptoCurrencyAllowableValues();
        if (!is_null($this->container['crypto_currency']) && !in_array($this->container['crypto_currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'crypto_currency', must be one of '%s'",
                $this->container['crypto_currency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id transaction_id
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string|null $order_status order_status
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!in_array($order_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_status', must be one of '%s'",
                    $order_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email customer_email
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        if (is_null($customer_email)) {
            throw new \InvalidArgumentException('non-nullable customer_email cannot be null');
        }
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string|null $customer_name customer_name
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        if (is_null($customer_name)) {
            throw new \InvalidArgumentException('non-nullable customer_name cannot be null');
        }
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets crypto_amount
     *
     * @return float|null
     */
    public function getCryptoAmount()
    {
        return $this->container['crypto_amount'];
    }

    /**
     * Sets crypto_amount
     *
     * @param float|null $crypto_amount crypto_amount
     *
     * @return self
     */
    public function setCryptoAmount($crypto_amount)
    {
        if (is_null($crypto_amount)) {
            throw new \InvalidArgumentException('non-nullable crypto_amount cannot be null');
        }
        $this->container['crypto_amount'] = $crypto_amount;

        return $this;
    }

    /**
     * Gets crypto_currency
     *
     * @return string|null
     */
    public function getCryptoCurrency()
    {
        return $this->container['crypto_currency'];
    }

    /**
     * Sets crypto_currency
     *
     * @param string|null $crypto_currency crypto_currency
     *
     * @return self
     */
    public function setCryptoCurrency($crypto_currency)
    {
        if (is_null($crypto_currency)) {
            throw new \InvalidArgumentException('non-nullable crypto_currency cannot be null');
        }
        $allowedValues = $this->getCryptoCurrencyAllowableValues();
        if (!in_array($crypto_currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'crypto_currency', must be one of '%s'",
                    $crypto_currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['crypto_currency'] = $crypto_currency;

        return $this;
    }

    /**
     * Gets blockchain_hash
     *
     * @return string|null
     */
    public function getBlockchainHash()
    {
        return $this->container['blockchain_hash'];
    }

    /**
     * Sets blockchain_hash
     *
     * @param string|null $blockchain_hash blockchain_hash
     *
     * @return self
     */
    public function setBlockchainHash($blockchain_hash)
    {
        if (is_null($blockchain_hash)) {
            throw new \InvalidArgumentException('non-nullable blockchain_hash cannot be null');
        }
        $this->container['blockchain_hash'] = $blockchain_hash;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


