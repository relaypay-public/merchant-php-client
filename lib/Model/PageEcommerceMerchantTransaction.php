<?php
/**
 * PageEcommerceMerchantTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RelayPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RelayPay API
 *
 * Documentation RelayPay API v2.0.0
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: danny@relaypay.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RelayPay\Model;

use \ArrayAccess;
use \RelayPay\ObjectSerializer;

/**
 * PageEcommerceMerchantTransaction Class Doc Comment
 *
 * @category Class
 * @package  RelayPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PageEcommerceMerchantTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PageEcommerceMerchantTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_elements' => 'int',
        'total_pages' => 'int',
        'size' => 'int',
        'content' => '\RelayPay\Model\EcommerceMerchantTransaction[]',
        'number' => 'int',
        'sort' => '\RelayPay\Model\SortObject',
        'pageable' => '\RelayPay\Model\Pageable',
        'number_of_elements' => 'int',
        'first' => 'bool',
        'last' => 'bool',
        'empty' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_elements' => 'int64',
        'total_pages' => 'int32',
        'size' => 'int32',
        'content' => null,
        'number' => 'int32',
        'sort' => null,
        'pageable' => null,
        'number_of_elements' => 'int32',
        'first' => null,
        'last' => null,
        'empty' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_elements' => false,
        'total_pages' => false,
        'size' => false,
        'content' => false,
        'number' => false,
        'sort' => false,
        'pageable' => false,
        'number_of_elements' => false,
        'first' => false,
        'last' => false,
        'empty' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_elements' => 'totalElements',
        'total_pages' => 'totalPages',
        'size' => 'size',
        'content' => 'content',
        'number' => 'number',
        'sort' => 'sort',
        'pageable' => 'pageable',
        'number_of_elements' => 'numberOfElements',
        'first' => 'first',
        'last' => 'last',
        'empty' => 'empty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_elements' => 'setTotalElements',
        'total_pages' => 'setTotalPages',
        'size' => 'setSize',
        'content' => 'setContent',
        'number' => 'setNumber',
        'sort' => 'setSort',
        'pageable' => 'setPageable',
        'number_of_elements' => 'setNumberOfElements',
        'first' => 'setFirst',
        'last' => 'setLast',
        'empty' => 'setEmpty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_elements' => 'getTotalElements',
        'total_pages' => 'getTotalPages',
        'size' => 'getSize',
        'content' => 'getContent',
        'number' => 'getNumber',
        'sort' => 'getSort',
        'pageable' => 'getPageable',
        'number_of_elements' => 'getNumberOfElements',
        'first' => 'getFirst',
        'last' => 'getLast',
        'empty' => 'getEmpty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_elements', $data ?? [], null);
        $this->setIfExists('total_pages', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
        $this->setIfExists('pageable', $data ?? [], null);
        $this->setIfExists('number_of_elements', $data ?? [], null);
        $this->setIfExists('first', $data ?? [], null);
        $this->setIfExists('last', $data ?? [], null);
        $this->setIfExists('empty', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_elements
     *
     * @return int|null
     */
    public function getTotalElements()
    {
        return $this->container['total_elements'];
    }

    /**
     * Sets total_elements
     *
     * @param int|null $total_elements total_elements
     *
     * @return self
     */
    public function setTotalElements($total_elements)
    {
        if (is_null($total_elements)) {
            throw new \InvalidArgumentException('non-nullable total_elements cannot be null');
        }
        $this->container['total_elements'] = $total_elements;

        return $this;
    }

    /**
     * Gets total_pages
     *
     * @return int|null
     */
    public function getTotalPages()
    {
        return $this->container['total_pages'];
    }

    /**
     * Sets total_pages
     *
     * @param int|null $total_pages total_pages
     *
     * @return self
     */
    public function setTotalPages($total_pages)
    {
        if (is_null($total_pages)) {
            throw new \InvalidArgumentException('non-nullable total_pages cannot be null');
        }
        $this->container['total_pages'] = $total_pages;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets content
     *
     * @return \RelayPay\Model\EcommerceMerchantTransaction[]|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param \RelayPay\Model\EcommerceMerchantTransaction[]|null $content content
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return \RelayPay\Model\SortObject|null
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param \RelayPay\Model\SortObject|null $sort sort
     *
     * @return self
     */
    public function setSort($sort)
    {
        if (is_null($sort)) {
            throw new \InvalidArgumentException('non-nullable sort cannot be null');
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets pageable
     *
     * @return \RelayPay\Model\Pageable|null
     */
    public function getPageable()
    {
        return $this->container['pageable'];
    }

    /**
     * Sets pageable
     *
     * @param \RelayPay\Model\Pageable|null $pageable pageable
     *
     * @return self
     */
    public function setPageable($pageable)
    {
        if (is_null($pageable)) {
            throw new \InvalidArgumentException('non-nullable pageable cannot be null');
        }
        $this->container['pageable'] = $pageable;

        return $this;
    }

    /**
     * Gets number_of_elements
     *
     * @return int|null
     */
    public function getNumberOfElements()
    {
        return $this->container['number_of_elements'];
    }

    /**
     * Sets number_of_elements
     *
     * @param int|null $number_of_elements number_of_elements
     *
     * @return self
     */
    public function setNumberOfElements($number_of_elements)
    {
        if (is_null($number_of_elements)) {
            throw new \InvalidArgumentException('non-nullable number_of_elements cannot be null');
        }
        $this->container['number_of_elements'] = $number_of_elements;

        return $this;
    }

    /**
     * Gets first
     *
     * @return bool|null
     */
    public function getFirst()
    {
        return $this->container['first'];
    }

    /**
     * Sets first
     *
     * @param bool|null $first first
     *
     * @return self
     */
    public function setFirst($first)
    {
        if (is_null($first)) {
            throw new \InvalidArgumentException('non-nullable first cannot be null');
        }
        $this->container['first'] = $first;

        return $this;
    }

    /**
     * Gets last
     *
     * @return bool|null
     */
    public function getLast()
    {
        return $this->container['last'];
    }

    /**
     * Sets last
     *
     * @param bool|null $last last
     *
     * @return self
     */
    public function setLast($last)
    {
        if (is_null($last)) {
            throw new \InvalidArgumentException('non-nullable last cannot be null');
        }
        $this->container['last'] = $last;

        return $this;
    }

    /**
     * Gets empty
     *
     * @return bool|null
     */
    public function getEmpty()
    {
        return $this->container['empty'];
    }

    /**
     * Sets empty
     *
     * @param bool|null $empty empty
     *
     * @return self
     */
    public function setEmpty($empty)
    {
        if (is_null($empty)) {
            throw new \InvalidArgumentException('non-nullable empty cannot be null');
        }
        $this->container['empty'] = $empty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


