<?php
/**
 * EcommerceIncomingRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RelayPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RelayPay API
 *
 * Documentation RelayPay API v2.0.0
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: danny@relaypay.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RelayPay\Model;

use \ArrayAccess;
use \RelayPay\ObjectSerializer;

/**
 * EcommerceIncomingRequest Class Doc Comment
 *
 * @category Class
 * @description E-commerce Transaction Request
 * @package  RelayPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EcommerceIncomingRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EcommerceIncomingRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'customer_name' => 'string',
        'customer_email' => 'string',
        'store_name' => 'string',
        'currency' => 'string',
        'order_id' => 'string',
        'callback_url_redirect' => 'string',
        'callback_cancel_url_redirect' => 'string',
        'web_hook_url' => 'string',
        'security_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'customer_name' => null,
        'customer_email' => null,
        'store_name' => null,
        'currency' => null,
        'order_id' => null,
        'callback_url_redirect' => null,
        'callback_cancel_url_redirect' => null,
        'web_hook_url' => null,
        'security_token' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'customer_name' => false,
        'customer_email' => false,
        'store_name' => false,
        'currency' => false,
        'order_id' => false,
        'callback_url_redirect' => false,
        'callback_cancel_url_redirect' => false,
        'web_hook_url' => false,
        'security_token' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'customer_name' => 'customerName',
        'customer_email' => 'customerEmail',
        'store_name' => 'storeName',
        'currency' => 'currency',
        'order_id' => 'orderId',
        'callback_url_redirect' => 'callbackUrlRedirect',
        'callback_cancel_url_redirect' => 'callbackCancelUrlRedirect',
        'web_hook_url' => 'webHookUrl',
        'security_token' => 'securityToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'customer_name' => 'setCustomerName',
        'customer_email' => 'setCustomerEmail',
        'store_name' => 'setStoreName',
        'currency' => 'setCurrency',
        'order_id' => 'setOrderId',
        'callback_url_redirect' => 'setCallbackUrlRedirect',
        'callback_cancel_url_redirect' => 'setCallbackCancelUrlRedirect',
        'web_hook_url' => 'setWebHookUrl',
        'security_token' => 'setSecurityToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'customer_name' => 'getCustomerName',
        'customer_email' => 'getCustomerEmail',
        'store_name' => 'getStoreName',
        'currency' => 'getCurrency',
        'order_id' => 'getOrderId',
        'callback_url_redirect' => 'getCallbackUrlRedirect',
        'callback_cancel_url_redirect' => 'getCallbackCancelUrlRedirect',
        'web_hook_url' => 'getWebHookUrl',
        'security_token' => 'getSecurityToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('customer_name', $data ?? [], null);
        $this->setIfExists('customer_email', $data ?? [], null);
        $this->setIfExists('store_name', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('callback_url_redirect', $data ?? [], null);
        $this->setIfExists('callback_cancel_url_redirect', $data ?? [], null);
        $this->setIfExists('web_hook_url', $data ?? [], null);
        $this->setIfExists('security_token', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['callback_url_redirect'] === null) {
            $invalidProperties[] = "'callback_url_redirect' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string|null $customer_name customer_name
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        if (is_null($customer_name)) {
            throw new \InvalidArgumentException('non-nullable customer_name cannot be null');
        }
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email customer_email
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        if (is_null($customer_email)) {
            throw new \InvalidArgumentException('non-nullable customer_email cannot be null');
        }
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets store_name
     *
     * @return string|null
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     *
     * @param string|null $store_name store_name
     *
     * @return self
     */
    public function setStoreName($store_name)
    {
        if (is_null($store_name)) {
            throw new \InvalidArgumentException('non-nullable store_name cannot be null');
        }
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets callback_url_redirect
     *
     * @return string
     */
    public function getCallbackUrlRedirect()
    {
        return $this->container['callback_url_redirect'];
    }

    /**
     * Sets callback_url_redirect
     *
     * @param string $callback_url_redirect Where to redirect once the payment is pending or cancelled. If this value is provided it'll override the general settings.
     *
     * @return self
     */
    public function setCallbackUrlRedirect($callback_url_redirect)
    {
        if (is_null($callback_url_redirect)) {
            throw new \InvalidArgumentException('non-nullable callback_url_redirect cannot be null');
        }
        $this->container['callback_url_redirect'] = $callback_url_redirect;

        return $this;
    }

    /**
     * Gets callback_cancel_url_redirect
     *
     * @return string|null
     */
    public function getCallbackCancelUrlRedirect()
    {
        return $this->container['callback_cancel_url_redirect'];
    }

    /**
     * Sets callback_cancel_url_redirect
     *
     * @param string|null $callback_cancel_url_redirect Where to redirect once the payment is cancelled. If this value is not provided callbackUrlRedirect will be used
     *
     * @return self
     */
    public function setCallbackCancelUrlRedirect($callback_cancel_url_redirect)
    {
        if (is_null($callback_cancel_url_redirect)) {
            throw new \InvalidArgumentException('non-nullable callback_cancel_url_redirect cannot be null');
        }
        $this->container['callback_cancel_url_redirect'] = $callback_cancel_url_redirect;

        return $this;
    }

    /**
     * Gets web_hook_url
     *
     * @return string|null
     */
    public function getWebHookUrl()
    {
        return $this->container['web_hook_url'];
    }

    /**
     * Sets web_hook_url
     *
     * @param string|null $web_hook_url Where to post updates about a payment. These will be posted with every payment change. This callback is guaranteed to happen before we redirect the user back. If this value is provided it'll override the general settings. If not provide at all - webhook will not send
     *
     * @return self
     */
    public function setWebHookUrl($web_hook_url)
    {
        if (is_null($web_hook_url)) {
            throw new \InvalidArgumentException('non-nullable web_hook_url cannot be null');
        }
        $this->container['web_hook_url'] = $web_hook_url;

        return $this;
    }

    /**
     * Gets security_token
     *
     * @return string|null
     */
    public function getSecurityToken()
    {
        return $this->container['security_token'];
    }

    /**
     * Sets security_token
     *
     * @param string|null $security_token This token will be sent back with the callback in Authorization header. (Authorization:  [type] [credentials]  (e.x Basic Rjc1234567890jdGMS67890U78...)) When creating the token, both 'type' and 'credentials' are required.
     *
     * @return self
     */
    public function setSecurityToken($security_token)
    {
        if (is_null($security_token)) {
            throw new \InvalidArgumentException('non-nullable security_token cannot be null');
        }
        $this->container['security_token'] = $security_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


